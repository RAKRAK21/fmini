{"ast":null,"code":"var _jsxFileName = \"/Users/choihyungrak/Desktop/frontmini/todolist/src/components/Todolist.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Todohead from './Todohead';\nimport Todocreate from './Todocreate';\nimport Todoitem from './Todoitem';\n// import { getDate } from 'date-fns';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Todolist = () => {\n  _s();\n  const getDateKey = date => {\n    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n  };\n  const [todos, setTodos] = useState(() => {\n    // 초기 상태를 함수로 제공하여 컴포넌트 마운트 시 한 번만 실행되도록 함\n    const savedDate = localStorage.getItem('currentDate');\n    const currentDate = savedDate ? new Date(savedDate) : new Date();\n    const dateKey = getDateKey(currentDate);\n    return JSON.parse(localStorage.getItem(dateKey)) || [];\n  });\n  const [currentDate, setCurrentDate] = useState(() => {\n    const savedDate = localStorage.getItem('currentDate');\n    return savedDate ? new Date(savedDate) : new Date();\n  });\n  useEffect(() => {\n    const checkDateChange = () => {\n      const newDate = new Date();\n      if (getDateKey(newDate) !== getDateKey(currentDate)) {\n        setCurrentDate(newDate);\n        localStorage.setItem('currentDate', newDate.toISOString()); // 로컬 스토리지에 새로운 현재 날짜 저장.\n        const dateKey = getDateKey(newDate); // 새로운 날짜 키 생성\n        const savedTodos = JSON.parse(localStorage.getItem(dateKey)) || []; // 로컬 스토리지에서 새로운 날짜의 할 일 목록 가져옴.\n        setTodos(savedTodos);\n      }\n    }; // 날짜가 변경되면 그 때 할일 목록을 로컬에 저장해줌.\n\n    // 1분마다 날짜 변경 체크\n    const intervalId = setInterval(checkDateChange, 60000);\n    return () => clearInterval(intervalId); // 컴포넌트 언마운트 시 인터벌 정리\n  }, [currentDate]);\n  useEffect(() => {\n    const dateKey = getDateKey(currentDate);\n    localStorage.setItem(dateKey, JSON.stringify(todos));\n    localStorage.setItem('currentDate', currentDate.toISOString());\n  }, [todos, currentDate]); // 투두가 변경되거나 currentdate가 변경될 때마다 로컬에 저장.\n\n  const addTodo = text => {\n    const newTodos = [...todos, {\n      text,\n      completed: false\n    }];\n    setTodos(newTodos);\n  };\n  const toggleTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].completed = !newTodos[index].completed;\n    setTodos(newTodos);\n  };\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n  const updateTodo = (index, newText) => {\n    const newTodos = [...todos];\n    newTodos[index].text = newText;\n    setTodos(newTodos);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Todohead, {\n      currentDate: currentDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full max-w-md p-4 bg-gray-100 rounded-lg shadow-md mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Todocreate, {\n          addTodo: addTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: todos.map((todo, index) => /*#__PURE__*/_jsxDEV(Todoitem, {\n            todo: todo,\n            toggleTodo: () => toggleTodo(index),\n            removeTodo: () => removeTodo(index),\n            updateTodo: newText => updateTodo(index, newText)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Todolist, \"xXcavU7JefKD7SkQdIVKYp8Wil0=\");\n_c = Todolist;\nexport default Todolist;\nvar _c;\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","useState","useEffect","Todohead","Todocreate","Todoitem","jsxDEV","_jsxDEV","Fragment","_Fragment","Todolist","_s","getDateKey","date","getFullYear","String","getMonth","padStart","getDate","todos","setTodos","savedDate","localStorage","getItem","currentDate","Date","dateKey","JSON","parse","setCurrentDate","checkDateChange","newDate","setItem","toISOString","savedTodos","intervalId","setInterval","clearInterval","stringify","addTodo","text","newTodos","completed","toggleTodo","index","removeTodo","splice","updateTodo","newText","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","todo","_c","$RefreshReg$"],"sources":["/Users/choihyungrak/Desktop/frontmini/todolist/src/components/Todolist.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Todohead from './Todohead';\nimport Todocreate from './Todocreate';\nimport Todoitem from './Todoitem';\n// import { getDate } from 'date-fns';\n\nconst Todolist = () => {\n  const getDateKey = (date) => {\n    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n  };\n\n  const [todos, setTodos] = useState(() => {\n    // 초기 상태를 함수로 제공하여 컴포넌트 마운트 시 한 번만 실행되도록 함\n    const savedDate = localStorage.getItem('currentDate');\n    const currentDate = savedDate ? new Date(savedDate) : new Date();\n    const dateKey = getDateKey(currentDate);\n    return JSON.parse(localStorage.getItem(dateKey)) || [];\n  });\n  \n  const [currentDate, setCurrentDate] = useState(() => {\n    const savedDate = localStorage.getItem('currentDate');\n    return savedDate ? new Date(savedDate) : new Date();\n  });\n\n  useEffect(() => {\n    const checkDateChange = () => {\n      const newDate = new Date();\n      if (getDateKey(newDate) !== getDateKey(currentDate)) {\n        setCurrentDate(newDate);\n        localStorage.setItem('currentDate', newDate.toISOString()); // 로컬 스토리지에 새로운 현재 날짜 저장.\n        const dateKey = getDateKey(newDate); // 새로운 날짜 키 생성\n        const savedTodos = JSON.parse(localStorage.getItem(dateKey)) || []; // 로컬 스토리지에서 새로운 날짜의 할 일 목록 가져옴.\n        setTodos(savedTodos);\n      }\n    }; // 날짜가 변경되면 그 때 할일 목록을 로컬에 저장해줌.\n\n    // 1분마다 날짜 변경 체크\n    const intervalId = setInterval(checkDateChange, 60000);\n\n    return () => clearInterval(intervalId); // 컴포넌트 언마운트 시 인터벌 정리\n  }, [currentDate]);\n\n  useEffect(() => {\n    const dateKey = getDateKey(currentDate);\n    localStorage.setItem(dateKey, JSON.stringify(todos));\n    localStorage.setItem('currentDate', currentDate.toISOString());\n  }, [todos, currentDate]); // 투두가 변경되거나 currentdate가 변경될 때마다 로컬에 저장.\n\n  const addTodo = (text) => {\n    const newTodos = [...todos, { text, completed: false }];\n    setTodos(newTodos);\n  };\n\n  const toggleTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos[index].completed = !newTodos[index].completed;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  const updateTodo = (index, newText) => {\n    const newTodos = [...todos];\n    newTodos[index].text = newText;\n    setTodos(newTodos);\n  };\n\n  return (\n    <>\n      <Todohead currentDate={currentDate} />\n      <div className=\"flex flex-col items-center\">\n        <div className=\"w-full max-w-md p-4 bg-gray-100 rounded-lg shadow-md mt-4\">\n          <Todocreate addTodo={addTodo} />\n          <ul>\n            {todos.map((todo, index) => (\n              <Todoitem\n                key={index}\n                todo={todo}\n                toggleTodo={() => toggleTodo(index)}\n                removeTodo={() => removeTodo(index)}\n                updateTodo={(newText) => updateTodo(index, newText)}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Todolist;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,YAAY;AACjC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,UAAU,GAAIC,IAAI,IAAK;IAC3B,OAAO,GAAGA,IAAI,CAACC,WAAW,CAAC,CAAC,IAAIC,MAAM,CAACF,IAAI,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,MAAM,CAACF,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EAC3H,CAAC;EAED,MAAM,CAACE,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,MAAM;IACvC;IACA,MAAMoB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,MAAMC,WAAW,GAAGH,SAAS,GAAG,IAAII,IAAI,CAACJ,SAAS,CAAC,GAAG,IAAII,IAAI,CAAC,CAAC;IAChE,MAAMC,OAAO,GAAGd,UAAU,CAACY,WAAW,CAAC;IACvC,OAAOG,IAAI,CAACC,KAAK,CAACN,YAAY,CAACC,OAAO,CAACG,OAAO,CAAC,CAAC,IAAI,EAAE;EACxD,CAAC,CAAC;EAEF,MAAM,CAACF,WAAW,EAAEK,cAAc,CAAC,GAAG5B,QAAQ,CAAC,MAAM;IACnD,MAAMoB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,OAAOF,SAAS,GAAG,IAAII,IAAI,CAACJ,SAAS,CAAC,GAAG,IAAII,IAAI,CAAC,CAAC;EACrD,CAAC,CAAC;EAEFvB,SAAS,CAAC,MAAM;IACd,MAAM4B,eAAe,GAAGA,CAAA,KAAM;MAC5B,MAAMC,OAAO,GAAG,IAAIN,IAAI,CAAC,CAAC;MAC1B,IAAIb,UAAU,CAACmB,OAAO,CAAC,KAAKnB,UAAU,CAACY,WAAW,CAAC,EAAE;QACnDK,cAAc,CAACE,OAAO,CAAC;QACvBT,YAAY,CAACU,OAAO,CAAC,aAAa,EAAED,OAAO,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAMP,OAAO,GAAGd,UAAU,CAACmB,OAAO,CAAC,CAAC,CAAC;QACrC,MAAMG,UAAU,GAAGP,IAAI,CAACC,KAAK,CAACN,YAAY,CAACC,OAAO,CAACG,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QACpEN,QAAQ,CAACc,UAAU,CAAC;MACtB;IACF,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMC,UAAU,GAAGC,WAAW,CAACN,eAAe,EAAE,KAAK,CAAC;IAEtD,OAAO,MAAMO,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACX,WAAW,CAAC,CAAC;EAEjBtB,SAAS,CAAC,MAAM;IACd,MAAMwB,OAAO,GAAGd,UAAU,CAACY,WAAW,CAAC;IACvCF,YAAY,CAACU,OAAO,CAACN,OAAO,EAAEC,IAAI,CAACW,SAAS,CAACnB,KAAK,CAAC,CAAC;IACpDG,YAAY,CAACU,OAAO,CAAC,aAAa,EAAER,WAAW,CAACS,WAAW,CAAC,CAAC,CAAC;EAChE,CAAC,EAAE,CAACd,KAAK,EAAEK,WAAW,CAAC,CAAC,CAAC,CAAC;;EAE1B,MAAMe,OAAO,GAAIC,IAAI,IAAK;IACxB,MAAMC,QAAQ,GAAG,CAAC,GAAGtB,KAAK,EAAE;MAAEqB,IAAI;MAAEE,SAAS,EAAE;IAAM,CAAC,CAAC;IACvDtB,QAAQ,CAACqB,QAAQ,CAAC;EACpB,CAAC;EAED,MAAME,UAAU,GAAIC,KAAK,IAAK;IAC5B,MAAMH,QAAQ,GAAG,CAAC,GAAGtB,KAAK,CAAC;IAC3BsB,QAAQ,CAACG,KAAK,CAAC,CAACF,SAAS,GAAG,CAACD,QAAQ,CAACG,KAAK,CAAC,CAACF,SAAS;IACtDtB,QAAQ,CAACqB,QAAQ,CAAC;EACpB,CAAC;EAED,MAAMI,UAAU,GAAID,KAAK,IAAK;IAC5B,MAAMH,QAAQ,GAAG,CAAC,GAAGtB,KAAK,CAAC;IAC3BsB,QAAQ,CAACK,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IACzBxB,QAAQ,CAACqB,QAAQ,CAAC;EACpB,CAAC;EAED,MAAMM,UAAU,GAAGA,CAACH,KAAK,EAAEI,OAAO,KAAK;IACrC,MAAMP,QAAQ,GAAG,CAAC,GAAGtB,KAAK,CAAC;IAC3BsB,QAAQ,CAACG,KAAK,CAAC,CAACJ,IAAI,GAAGQ,OAAO;IAC9B5B,QAAQ,CAACqB,QAAQ,CAAC;EACpB,CAAC;EAED,oBACElC,OAAA,CAAAE,SAAA;IAAAwC,QAAA,gBACE1C,OAAA,CAACJ,QAAQ;MAACqB,WAAW,EAAEA;IAAY;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtC9C,OAAA;MAAK+C,SAAS,EAAC,4BAA4B;MAAAL,QAAA,eACzC1C,OAAA;QAAK+C,SAAS,EAAC,2DAA2D;QAAAL,QAAA,gBACxE1C,OAAA,CAACH,UAAU;UAACmC,OAAO,EAAEA;QAAQ;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAChC9C,OAAA;UAAA0C,QAAA,EACG9B,KAAK,CAACoC,GAAG,CAAC,CAACC,IAAI,EAAEZ,KAAK,kBACrBrC,OAAA,CAACF,QAAQ;YAEPmD,IAAI,EAAEA,IAAK;YACXb,UAAU,EAAEA,CAAA,KAAMA,UAAU,CAACC,KAAK,CAAE;YACpCC,UAAU,EAAEA,CAAA,KAAMA,UAAU,CAACD,KAAK,CAAE;YACpCG,UAAU,EAAGC,OAAO,IAAKD,UAAU,CAACH,KAAK,EAAEI,OAAO;UAAE,GAJ/CJ,KAAK;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKX,CACF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAAC1C,EAAA,CAtFID,QAAQ;AAAA+C,EAAA,GAAR/C,QAAQ;AAwFd,eAAeA,QAAQ;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}