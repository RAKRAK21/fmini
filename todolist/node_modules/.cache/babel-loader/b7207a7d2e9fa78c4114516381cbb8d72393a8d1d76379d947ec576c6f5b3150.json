{"ast":null,"code":"var _jsxFileName = \"/Users/choihyungrak/Desktop/frontmini/todolist/src/components/calendar/Calendar.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import CalendarHead from './CalendarHead';\n// import CalendarBody from './CalendarBody';\n// import TodoModal from './TodoModal';\n\n// const Calendar = () => {\n//   const [currentDate, setCurrentDate] = useState(new Date());\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [modalOpen, setModalOpen] = useState(false);\n//   const [todos, setTodos] = useState([]);\n\n//   const handleDateClick = (date) => {\n//     setSelectedDate(date);\n//     setModalOpen(true);\n//     const dateKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`; // toISOString()은 UTC 기준으로 날짜를 반환하므로, 로컬 시간에 맞도록 해주어야 한다.\n//     const savedTodos = JSON.parse(localStorage.getItem(dateKey)) || [];\n//     setTodos(savedTodos);\n//   };\n\n//   const handleCloseModal = () => {\n//     setModalOpen(false);\n//   }\n\n//   return (\n//     <div className=\"calendar-container flex flex-col items-center w-full max-w-4xl mx-auto h-full min-h-[800px]\">\n//       <CalendarHead currentDate={currentDate} setCurrentDate={setCurrentDate} />\n//       <CalendarBody currentDate={currentDate} onDateClick={handleDateClick}/>\n//       <TodoModal\n//         isOpen={modalOpen}\n//         onClose={handleCloseModal}\n//         date={selectedDate}\n//         todos={todos}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Calendar;\n\nimport React, { useState } from 'react';\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\nimport { dbService, authService } from '../../firebase/fbInstance';\nimport CalendarHead from './CalendarHead';\nimport CalendarBody from './CalendarBody';\nimport TodoModal from './TodoModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [todos, setTodos] = useState([]);\n  const handleDateClick = async date => {\n    setSelectedDate(date);\n    setModalOpen(true);\n    const dateKey = date.toISOString().split('T')[0];\n    if (authService.currentUser) {\n      const q = query(collection(dbService, \"todos\"), where(\"userId\", \"==\", authService.currentUser.uid), where(\"date\", \"==\", dateKey));\n      const querySnapshot = await getDocs(q);\n      const fetchedTodos = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setTodos(fetchedTodos);\n    }\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container flex flex-col items-center w-full max-w-4xl mx-auto h-full min-h-[800px]\",\n    children: [/*#__PURE__*/_jsxDEV(CalendarHead, {\n      currentDate: currentDate,\n      setCurrentDate: setCurrentDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalendarBody, {\n      currentDate: currentDate,\n      onDateClick: handleDateClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoModal, {\n      isOpen: modalOpen,\n      onClose: handleCloseModal,\n      date: selectedDate,\n      todos: todos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"P98XlsT6dFlPvgkGJLFL2mUUzwg=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","collection","query","where","getDocs","dbService","authService","CalendarHead","CalendarBody","TodoModal","jsxDEV","_jsxDEV","Calendar","_s","currentDate","setCurrentDate","Date","selectedDate","setSelectedDate","modalOpen","setModalOpen","todos","setTodos","handleDateClick","date","dateKey","toISOString","split","currentUser","q","uid","querySnapshot","fetchedTodos","docs","map","doc","id","data","handleCloseModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDateClick","isOpen","onClose","_c","$RefreshReg$"],"sources":["/Users/choihyungrak/Desktop/frontmini/todolist/src/components/calendar/Calendar.jsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import CalendarHead from './CalendarHead';\n// import CalendarBody from './CalendarBody';\n// import TodoModal from './TodoModal';\n\n// const Calendar = () => {\n//   const [currentDate, setCurrentDate] = useState(new Date());\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [modalOpen, setModalOpen] = useState(false);\n//   const [todos, setTodos] = useState([]);\n\n//   const handleDateClick = (date) => {\n//     setSelectedDate(date);\n//     setModalOpen(true);\n//     const dateKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`; // toISOString()은 UTC 기준으로 날짜를 반환하므로, 로컬 시간에 맞도록 해주어야 한다.\n//     const savedTodos = JSON.parse(localStorage.getItem(dateKey)) || [];\n//     setTodos(savedTodos);\n//   };\n\n//   const handleCloseModal = () => {\n//     setModalOpen(false);\n//   }\n\n//   return (\n//     <div className=\"calendar-container flex flex-col items-center w-full max-w-4xl mx-auto h-full min-h-[800px]\">\n//       <CalendarHead currentDate={currentDate} setCurrentDate={setCurrentDate} />\n//       <CalendarBody currentDate={currentDate} onDateClick={handleDateClick}/>\n//       <TodoModal\n//         isOpen={modalOpen}\n//         onClose={handleCloseModal}\n//         date={selectedDate}\n//         todos={todos}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Calendar;\n\nimport React, { useState } from 'react';\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\nimport { dbService, authService } from '../../firebase/fbInstance';\nimport CalendarHead from './CalendarHead';\nimport CalendarBody from './CalendarBody';\nimport TodoModal from './TodoModal';\n\nconst Calendar = () => {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [todos, setTodos] = useState([]);\n\n  const handleDateClick = async (date) => {\n    setSelectedDate(date);\n    setModalOpen(true);\n    const dateKey = date.toISOString().split('T')[0];\n    \n    if (authService.currentUser) {\n      const q = query(\n        collection(dbService, \"todos\"),\n        where(\"userId\", \"==\", authService.currentUser.uid),\n        where(\"date\", \"==\", dateKey)\n      );\n      const querySnapshot = await getDocs(q);\n      const fetchedTodos = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setTodos(fetchedTodos);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  }\n\n  return (\n    <div className=\"calendar-container flex flex-col items-center w-full max-w-4xl mx-auto h-full min-h-[800px]\">\n      <CalendarHead currentDate={currentDate} setCurrentDate={setCurrentDate} />\n      <CalendarBody currentDate={currentDate} onDateClick={handleDateClick}/>\n      <TodoModal\n        isOpen={modalOpen}\n        onClose={handleCloseModal}\n        date={selectedDate}\n        todos={todos}\n      />\n    </div>\n  );\n};\n\nexport default Calendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}