{"ast":null,"code":"var _jsxFileName = \"/Users/choihyungrak/Desktop/frontmini/todolist/src/components/Todohead.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Todohead = () => {\n  _s();\n  const [quote, setQuote] = useState(''); // 명언을 저장할 상태\n  const [date, setDate] = useState(new Date()); // 현재 날짜를 저장할 상태\n\n  // 명언을 가져오는 비동기 함수\n  const fetchQuote = async () => {\n    try {\n      const response = await fetch('https://api.quotable.io/random');\n      const data = await response.json();\n      setQuote(data.content); // 가져온 명언을 상태에 저장\n    } catch (error) {\n      console.error('Error fetching quote:', error); // 에러 처리\n    }\n  };\n\n  // 컴포넌트가 마운트될 때 명언을 가져오고, 날짜를 업데이트하는 타이머를 설정\n  useEffect(() => {\n    fetchQuote(); // 명언을 가져오는 함수 호출\n\n    // 1분마다 현재 날짜를 업데이트하는 타이머 설정\n    const timer = setInterval(() => setDate(new Date()), 60000);\n\n    // 컴포넌트가 언마운트될 때 타이머 정리\n    return () => clearInterval(timer);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 text-black w-screen flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: `${process.env.PUBLIC_URL}/fmbc.png`,\n      alt: \"Logo\",\n      className: \"w-16 h-16 mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl\",\n      children: \"Today's ToDo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: date.toLocaleDateString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"blockquote\", {\n      className: \"mt-2 italic text-center\",\n      children: [\"\\\"\", quote, \"\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Todohead, \"6ZlGnQWtNDVTkZGoTgZ7B/Z2AZI=\");\n_c = Todohead;\nexport default Todohead;\nvar _c;\n$RefreshReg$(_c, \"Todohead\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Todohead","_s","quote","setQuote","date","setDate","Date","fetchQuote","response","fetch","data","json","content","error","console","timer","setInterval","clearInterval","className","children","src","process","env","PUBLIC_URL","alt","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/choihyungrak/Desktop/frontmini/todolist/src/components/Todohead.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Todohead = () => {\n  const [quote, setQuote] = useState(''); // 명언을 저장할 상태\n  const [date, setDate] = useState(new Date()); // 현재 날짜를 저장할 상태\n\n  // 명언을 가져오는 비동기 함수\n  const fetchQuote = async () => {\n    try {\n      const response = await fetch('https://api.quotable.io/random');\n      const data = await response.json();\n      setQuote(data.content); // 가져온 명언을 상태에 저장\n    } catch (error) {\n      console.error('Error fetching quote:', error); // 에러 처리\n    }\n  };\n\n  // 컴포넌트가 마운트될 때 명언을 가져오고, 날짜를 업데이트하는 타이머를 설정\n  useEffect(() => {\n    fetchQuote(); // 명언을 가져오는 함수 호출\n\n    // 1분마다 현재 날짜를 업데이트하는 타이머 설정\n    const timer = setInterval(() => setDate(new Date()), 60000);\n\n    // 컴포넌트가 언마운트될 때 타이머 정리\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div className=\"p-4 text-black w-screen flex flex-col items-center\">\n      <img src={`${process.env.PUBLIC_URL}/fmbc.png`} alt=\"Logo\" className=\"w-16 h-16 mb-4\" />\n      <h1 className=\"text-2xl\">Today's ToDo List</h1>\n      <p>{date.toLocaleDateString()}</p>\n      <blockquote className=\"mt-2 italic text-center\">\"{quote}\"</blockquote>\n    </div>\n  );\n};\n\nexport default Todohead;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAIU,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE9C;EACA,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;MAC9D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCR,QAAQ,CAACO,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC,CAAC;IACjD;EACF,CAAC;;EAED;EACAhB,SAAS,CAAC,MAAM;IACdU,UAAU,CAAC,CAAC,CAAC,CAAC;;IAEd;IACA,MAAMQ,KAAK,GAAGC,WAAW,CAAC,MAAMX,OAAO,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;;IAE3D;IACA,OAAO,MAAMW,aAAa,CAACF,KAAK,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA;IAAKmB,SAAS,EAAC,oDAAoD;IAAAC,QAAA,gBACjEpB,OAAA;MAAKqB,GAAG,EAAE,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,WAAY;MAACC,GAAG,EAAC,MAAM;MAACN,SAAS,EAAC;IAAgB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxF7B,OAAA;MAAImB,SAAS,EAAC,UAAU;MAAAC,QAAA,EAAC;IAAiB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/C7B,OAAA;MAAAoB,QAAA,EAAIf,IAAI,CAACyB,kBAAkB,CAAC;IAAC;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClC7B,OAAA;MAAYmB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,GAAC,IAAC,EAACjB,KAAK,EAAC,IAAC;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAlCID,QAAQ;AAAA8B,EAAA,GAAR9B,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}