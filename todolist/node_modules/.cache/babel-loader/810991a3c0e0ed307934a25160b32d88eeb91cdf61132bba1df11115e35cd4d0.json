{"ast":null,"code":"var _jsxFileName = \"/Users/choihyungrak/Desktop/frontmini/todolist/src/components/calendar/CalendarBody.jsx\";\nimport { getDaysInMonth } from 'date-fns';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CALENDAR_LENGTH = 35; // 캘린더의 총 길이 (주 기준으로 5주)\nconst DEFAULT_TRASH_VALUE = 0;\nconst DAY_OF_WEEK = 7;\nconst DAY_LIST = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst CalendarBody = ({\n  currentDate,\n  onDateClick\n}) => {\n  const totalMonthDays = getDaysInMonth(currentDate); // 현재 월의 총 일수\n\n  // 현재 날짜의 요일 계산\n  const startDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\n\n  // 이전 달의 빈 칸을 채우기 위한 리스트\n  const prevDayList = Array.from({\n    length: startDay\n  }).map(() => DEFAULT_TRASH_VALUE);\n\n  // 현재 달의 날짜 리스트\n  const currentDayList = Array.from({\n    length: totalMonthDays\n  }).map((_, i) => i + 1);\n\n  // 다음 달의 빈 칸을 채우기 위한 리스트\n  const nextDayList = Array.from({\n    length: CALENDAR_LENGTH - currentDayList.length - prevDayList.length\n  }).map(() => DEFAULT_TRASH_VALUE);\n\n  // 전체 캘린더 리스트 (이전 달, 현재 달, 다음 달 날짜 포함)\n  const currentCalendarList = prevDayList.concat(currentDayList, nextDayList);\n\n  // 주 단위로 나누어 2차원 배열 생성\n  const weekCalendarList = currentCalendarList.reduce((acc, cur, idx) => {\n    const chunkIndex = Math.floor(idx / DAY_OF_WEEK);\n    if (!acc[chunkIndex]) {\n      acc[chunkIndex] = [];\n    }\n    acc[chunkIndex].push(cur);\n    return acc;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center w-full max-w-4xl mx-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table-fixed w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: DAY_LIST.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"px-2 py-2 border\",\n            children: day\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: weekCalendarList.map((week, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"h-[70px]\",\n          children: week.map((day, idx) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border p-2 align-top cursor-pointer\",\n            onClick: () => {\n              if (day !== DEFAULT_TRASH_VALUE) {\n                const clickedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n                onDateClick(clickedDate);\n              }\n            },\n            children: day === DEFAULT_TRASH_VALUE ? '' : day\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c = CalendarBody;\nexport default CalendarBody;\nvar _c;\n$RefreshReg$(_c, \"CalendarBody\");","map":{"version":3,"names":["getDaysInMonth","React","jsxDEV","_jsxDEV","CALENDAR_LENGTH","DEFAULT_TRASH_VALUE","DAY_OF_WEEK","DAY_LIST","CalendarBody","currentDate","onDateClick","totalMonthDays","startDay","Date","getFullYear","getMonth","getDay","prevDayList","Array","from","length","map","currentDayList","_","i","nextDayList","currentCalendarList","concat","weekCalendarList","reduce","acc","cur","idx","chunkIndex","Math","floor","push","className","children","day","fileName","_jsxFileName","lineNumber","columnNumber","week","index","onClick","clickedDate","_c","$RefreshReg$"],"sources":["/Users/choihyungrak/Desktop/frontmini/todolist/src/components/calendar/CalendarBody.jsx"],"sourcesContent":["import { getDaysInMonth } from 'date-fns';\nimport React from 'react';\n\n\nconst CALENDAR_LENGTH = 35; // 캘린더의 총 길이 (주 기준으로 5주)\nconst DEFAULT_TRASH_VALUE = 0;\nconst DAY_OF_WEEK = 7;\nconst DAY_LIST = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nconst CalendarBody = ({ currentDate, onDateClick }) => {\n  const totalMonthDays = getDaysInMonth(currentDate); // 현재 월의 총 일수\n\n  // 현재 날짜의 요일 계산\n  const startDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\n\n  // 이전 달의 빈 칸을 채우기 위한 리스트\n  const prevDayList = Array.from({\n    length: startDay,\n  }).map(() => DEFAULT_TRASH_VALUE);\n\n  // 현재 달의 날짜 리스트\n  const currentDayList = Array.from({ length: totalMonthDays }).map(\n    (_, i) => i + 1,\n  );\n\n  // 다음 달의 빈 칸을 채우기 위한 리스트\n  const nextDayList = Array.from({\n    length: CALENDAR_LENGTH - currentDayList.length - prevDayList.length,\n  }).map(() => DEFAULT_TRASH_VALUE);\n\n  // 전체 캘린더 리스트 (이전 달, 현재 달, 다음 달 날짜 포함)\n  const currentCalendarList = prevDayList.concat(currentDayList, nextDayList);\n\n  // 주 단위로 나누어 2차원 배열 생성\n  const weekCalendarList = currentCalendarList.reduce((acc, cur, idx) => {\n    const chunkIndex = Math.floor(idx / DAY_OF_WEEK);\n    if (!acc[chunkIndex]) {\n      acc[chunkIndex] = [];\n    }\n    acc[chunkIndex].push(cur);\n    return acc;\n  }, []);\n\n  return (\n    <div className=\"flex flex-col items-center w-full max-w-4xl mx-auto\">\n      <table className=\"table-fixed w-full\">\n        <thead>\n          <tr>\n            {DAY_LIST.map((day) => (\n              <th key={day} className=\"px-2 py-2 border\">{day}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {weekCalendarList.map((week, index) => (\n            <tr key={index} className=\"h-[70px]\">\n              {week.map((day, idx) => (\n                <td key={idx} className=\"border p-2 align-top cursor-pointer\"\n                onClick={() => {\n                    if (day !== DEFAULT_TRASH_VALUE) {\n                        const clickedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n                        onDateClick(clickedDate);\n                    }\n                }}>\n                  {day === DEFAULT_TRASH_VALUE ? '' : day}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default CalendarBody;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}