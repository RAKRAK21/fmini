{"ast":null,"code":"var _jsxFileName = \"/Users/choihyungrak/Desktop/frontmini/todolist/src/components/calendar/Calendar.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import CalendarHead from './CalendarHead';\n// import CalendarBody from './CalendarBody';\n// import TodoModal from './TodoModal';\n\n// const Calendar = () => {\n//   const [currentDate, setCurrentDate] = useState(new Date());\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [modalOpen, setModalOpen] = useState(false);\n//   const [todos, setTodos] = useState([]);\n\n//   const handleDateClick = (date) => {\n//     setSelectedDate(date);\n//     setModalOpen(true);\n//     const dateKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`; // toISOString()은 UTC 기준으로 날짜를 반환하므로, 로컬 시간에 맞도록 해주어야 한다.\n//     const savedTodos = JSON.parse(localStorage.getItem(dateKey)) || [];\n//     setTodos(savedTodos);\n//   };\n\n//   const handleCloseModal = () => {\n//     setModalOpen(false);\n//   }\n\n//   return (\n//     <div className=\"calendar-container flex flex-col items-center w-full max-w-4xl mx-auto h-full min-h-[800px]\">\n//       <CalendarHead currentDate={currentDate} setCurrentDate={setCurrentDate} />\n//       <CalendarBody currentDate={currentDate} onDateClick={handleDateClick}/>\n//       <TodoModal\n//         isOpen={modalOpen}\n//         onClose={handleCloseModal}\n//         date={selectedDate}\n//         todos={todos}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Calendar;\n\nimport React, { useState, useEffect } from 'react';\nimport { collection, query, where, onSnapshot } from \"firebase/firestore\";\nimport { dbService } from '../../firebase/fbInstance';\nimport CalendarHead from './CalendarHead';\nimport CalendarBody from './CalendarBody';\nimport TodoModal from './TodoModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  userObj\n}) => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    if (!userObj) return;\n    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    const startOfMonthStr = startOfMonth.toLocaleDateString('en-CA'); // YYYY-MM-DD 형식\n    const endOfMonthStr = endOfMonth.toLocaleDateString('en-CA');\n    const q = query(collection(dbService, \"todos\"), where(\"userId\", \"==\", userObj.uid), where(\"date\", \">=\", startOfMonthStr), where(\"date\", \"<=\", endOfMonthStr));\n    const unsubscribe = onSnapshot(q, querySnapshot => {\n      const fetchedTodos = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log(\"Fetched todos:\", fetchedTodos);\n      setTodos(fetchedTodos);\n    });\n    return () => unsubscribe();\n  }, [userObj, currentDate]);\n  const handleDateClick = date => {\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  };\n  const getSelectedDateTodos = () => {\n    if (!selectedDate) return [];\n    const dateString = selectedDate.toLocaleDateString('en-CA'); // 로컬 시간대로 변환\n    return todos.filter(todo => todo.date === dateString);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container flex flex-col items-center w-full max-w-4xl mx-auto h-full min-h-[800px]\",\n    children: [/*#__PURE__*/_jsxDEV(CalendarHead, {\n      currentDate: currentDate,\n      setCurrentDate: setCurrentDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalendarBody, {\n      currentDate: currentDate,\n      onDateClick: handleDateClick,\n      todos: todos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoModal, {\n      isOpen: modalOpen,\n      onClose: handleCloseModal,\n      date: selectedDate,\n      todos: getSelectedDateTodos()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"dxeaNO0Qi96a3JBYmnYwQg455EQ=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","collection","query","where","onSnapshot","dbService","CalendarHead","CalendarBody","TodoModal","jsxDEV","_jsxDEV","Calendar","userObj","_s","currentDate","setCurrentDate","Date","selectedDate","setSelectedDate","modalOpen","setModalOpen","todos","setTodos","startOfMonth","getFullYear","getMonth","endOfMonth","startOfMonthStr","toLocaleDateString","endOfMonthStr","q","uid","unsubscribe","querySnapshot","fetchedTodos","docs","map","doc","id","data","console","log","handleDateClick","date","handleCloseModal","getSelectedDateTodos","dateString","filter","todo","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDateClick","isOpen","onClose","_c","$RefreshReg$"],"sources":["/Users/choihyungrak/Desktop/frontmini/todolist/src/components/calendar/Calendar.jsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import CalendarHead from './CalendarHead';\n// import CalendarBody from './CalendarBody';\n// import TodoModal from './TodoModal';\n\n// const Calendar = () => {\n//   const [currentDate, setCurrentDate] = useState(new Date());\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [modalOpen, setModalOpen] = useState(false);\n//   const [todos, setTodos] = useState([]);\n\n//   const handleDateClick = (date) => {\n//     setSelectedDate(date);\n//     setModalOpen(true);\n//     const dateKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`; // toISOString()은 UTC 기준으로 날짜를 반환하므로, 로컬 시간에 맞도록 해주어야 한다.\n//     const savedTodos = JSON.parse(localStorage.getItem(dateKey)) || [];\n//     setTodos(savedTodos);\n//   };\n\n//   const handleCloseModal = () => {\n//     setModalOpen(false);\n//   }\n\n//   return (\n//     <div className=\"calendar-container flex flex-col items-center w-full max-w-4xl mx-auto h-full min-h-[800px]\">\n//       <CalendarHead currentDate={currentDate} setCurrentDate={setCurrentDate} />\n//       <CalendarBody currentDate={currentDate} onDateClick={handleDateClick}/>\n//       <TodoModal\n//         isOpen={modalOpen}\n//         onClose={handleCloseModal}\n//         date={selectedDate}\n//         todos={todos}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Calendar;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { collection, query, where, onSnapshot } from \"firebase/firestore\";\nimport { dbService } from '../../firebase/fbInstance';\nimport CalendarHead from './CalendarHead';\nimport CalendarBody from './CalendarBody';\nimport TodoModal from './TodoModal';\n\nconst Calendar = ({ userObj }) => {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    if (!userObj) return;\n\n    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n\n    const startOfMonthStr = startOfMonth.toLocaleDateString('en-CA'); // YYYY-MM-DD 형식\n    const endOfMonthStr = endOfMonth.toLocaleDateString('en-CA');\n\n    const q = query(\n      collection(dbService, \"todos\"),\n      where(\"userId\", \"==\", userObj.uid),\n      where(\"date\", \">=\", startOfMonthStr),\n      where(\"date\", \"<=\", endOfMonthStr)\n    );\n\n\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const fetchedTodos = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log(\"Fetched todos:\", fetchedTodos);\n      setTodos(fetchedTodos);\n    });\n\n    return () => unsubscribe();\n  }, [userObj, currentDate]);\n\n  const handleDateClick = (date) => {\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n  }\n\n  const getSelectedDateTodos = () => {\n    if (!selectedDate) return [];\n    const dateString = selectedDate.toLocaleDateString('en-CA'); // 로컬 시간대로 변환\n    return todos.filter(todo => todo.date === dateString);\n  };\n\n  return (\n    <div className=\"calendar-container flex flex-col items-center w-full max-w-4xl mx-auto h-full min-h-[800px]\">\n      <CalendarHead currentDate={currentDate} setCurrentDate={setCurrentDate} />\n      <CalendarBody \n        currentDate={currentDate} \n        onDateClick={handleDateClick}\n        todos={todos}\n      />\n      <TodoModal\n        isOpen={modalOpen}\n        onClose={handleCloseModal}\n        date={selectedDate}\n        todos={getSelectedDateTodos()}\n      />\n    </div>\n  );\n};\n\nexport default Calendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}