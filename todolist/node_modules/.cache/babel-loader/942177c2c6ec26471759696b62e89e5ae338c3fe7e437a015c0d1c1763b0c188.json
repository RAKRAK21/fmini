{"ast":null,"code":"var _jsxFileName = \"/Users/choihyungrak/Desktop/frontmini/todolist/src/firebase/Auth.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { authService } from '../firebase/fbInstance';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Auth = ({\n  setIsLoggedIn,\n  newAccount = false\n}) => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const onChange = e => {\n    const {\n      target: {\n        name,\n        value\n      }\n    } = e;\n    if (name === \"email\") setEmail(value);else if (name === \"password\") setPassword(value);\n  };\n  const onSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    try {\n      let data;\n      if (newAccount) {\n        data = await createUserWithEmailAndPassword(authService, email, password);\n        setMessage(\"회원가입에 성공했습니다!\");\n      } else {\n        data = await signInWithEmailAndPassword(authService, email, password);\n        setMessage(\"로그인에 성공했습니다!\");\n      }\n      setIsLoggedIn(true);\n      setTimeout(() => {\n        navigate('/');\n      }, 1500); // 1.5초 후 메인 페이지로 이동\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: newAccount ? \"회원가입\" : \"로그인\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"\\uC774\\uBA54\\uC77C\",\n        required: true,\n        value: email,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n        required: true,\n        value: password,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: newAccount ? \"회원가입\" : \"로그인\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 23\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: () => navigate(newAccount ? '/login' : '/signup'),\n      children: newAccount ? \"이미 계정이 있으신가요? 로그인하기\" : \"계정이 없으신가요? 회원가입하기\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Auth, \"Zacm02ViZJ3HL+vQfs7iM70ElXc=\", false, function () {\n  return [useNavigate];\n});\n_c = Auth;\nexport default Auth;\nvar _c;\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"names":["React","useState","createUserWithEmailAndPassword","signInWithEmailAndPassword","authService","useNavigate","jsxDEV","_jsxDEV","Auth","setIsLoggedIn","newAccount","_s","email","setEmail","password","setPassword","error","setError","message","setMessage","navigate","onChange","e","target","name","value","onSubmit","preventDefault","data","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","required","onClick","_c","$RefreshReg$"],"sources":["/Users/choihyungrak/Desktop/frontmini/todolist/src/firebase/Auth.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { authService } from '../firebase/fbInstance';\nimport { useNavigate } from 'react-router-dom';\n\nconst Auth = ({ setIsLoggedIn, newAccount = false }) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n    const [message, setMessage] = useState('');\n    const navigate = useNavigate();\n\n    const onChange = (e) => {\n        const { target: { name, value } } = e;\n        if (name === \"email\") setEmail(value);\n        else if (name === \"password\") setPassword(value);\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        setError('');\n        setMessage('');\n        try {\n            let data;\n            if(newAccount) {\n                data = await createUserWithEmailAndPassword(authService, email, password);\n                setMessage(\"회원가입에 성공했습니다!\");\n            } else {\n                data = await signInWithEmailAndPassword(authService, email, password);\n                setMessage(\"로그인에 성공했습니다!\");\n            }\n            setIsLoggedIn(true);\n            setTimeout(() => {\n                navigate('/');\n            }, 1500); // 1.5초 후 메인 페이지로 이동\n        } catch (error) {\n            setError(error.message);\n        }\n    }\n\n    return (\n        <div className=\"auth-container\">\n            <h2>{newAccount ? \"회원가입\" : \"로그인\"}</h2>\n            <form onSubmit={onSubmit}>\n                <input\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder='이메일'\n                    required\n                    value={email}\n                    onChange={onChange}\n                />\n                <input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"비밀번호\"\n                    required\n                    value={password}\n                    onChange={onChange}\n                />\n                <input\n                    type=\"submit\"\n                    value={newAccount ? \"회원가입\" : \"로그인\"}\n                />\n            </form>\n            {error && <p className=\"error-message\">{error}</p>}\n            {message && <p className=\"success-message\">{message}</p>}\n            <span onClick={() => navigate(newAccount ? '/login' : '/signup')}>\n                {newAccount ? \"이미 계정이 있으신가요? 로그인하기\" : \"계정이 없으신가요? 회원가입하기\"}\n            </span>\n        </div>\n    )\n}\n\nexport default Auth;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}